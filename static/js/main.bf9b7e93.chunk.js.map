{"version":3,"sources":["reducers/index.js","components/Tabs.js","components/List.js","components/TodoForm.js","App.jsx","serviceWorker.js","index.js"],"names":["initialState","todos","task","id","completed","tabs","name","todo","currentTab","reducer","state","action","type","value","payload","completedTodos","map","find","o","Tabs","dispatch","className","tab","key","onClick","List","handleChecked","pendingList","filter","completedList","renderedList","index","defaultChecked","onChange","TodoForm","handleSubmit","handleChange","onSubmit","placeholder","App","useReducer","event","preventDefault","Date","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf9b7e93.chunk.js","sourcesContent":["export const initialState = {\n  todos: [\n    {\n      task: \"Organize Garage\",\n      id: 1528817077286,\n      completed: false\n    },\n    {\n      task: \"Code\",\n      id: 1528817084358,\n      completed: true\n    },\n    {\n      task: \"Gym\",\n      id: 1528817084359,\n      completed: false\n    },\n    {\n      task: \"Sleep\",\n      id: 1528817084360,\n      completed: true\n    }\n  ],\n  tabs: [\n    { name: \"All\" },\n    { name: \"Pending\" },\n    { name: \"Completed\" }\n    // { name: \"Overdue\" }\n  ],\n  todo: \"\",\n  currentTab: \"All\"\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT\":\n      return { ...state, todo: action.value };\n    case \"SUBMIT\":\n      return { ...state, todos: [...state.todos, action.payload], todo: \"\" };\n    case \"COMPLETED\":\n      // map over the todos list which creates new list and\n      // replaced old object with new updated payload changing\n      // completed state.\n      // Here, arr2.find(o => o.id === obj.id) will return the\n      // element i.e. object from arr2 if the id is found in\n      // the arr2. If not, then the same element in arr1 i.e.\n      // obj is returned.\n      const completedTodos = [...state.todos].map(\n        todo => action.payload.find(o => o.id === todo.id) || todo\n      );\n      return {\n        ...state,\n        todos: [...completedTodos]\n      };\n    case \"FILTER\":\n      return {\n        ...state,\n        currentTab: action.currentTab\n      };\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\n\nfunction Tabs({ dispatch, ...state }) {\n  return (\n    <div className=\"filter-tab\">\n      {state.tabs.map(tab => {\n        return (\n          <div\n            key={tab.name}\n            className={state.currentTab === tab.name ? \"tab active-tab\" : \"tab\"}\n            onClick={() => dispatch({ type: \"FILTER\", currentTab: tab.name })}\n          >\n            {tab.name}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Tabs;\n","import React from \"react\";\n\nfunction List({ handleChecked, ...state }) {\n  let pendingList = state.todos.filter(todo => {\n    return !todo.completed;\n  });\n  let completedList = state.todos.filter(todo => {\n    return todo.completed;\n  });\n\n  const renderedList = (state.currentTab === \"Completed\"\n    ? completedList\n    : state.currentTab === \"Pending\"\n    ? pendingList\n    : state.todos\n  ).map((todo, index) => {\n    return (\n      <li key={todo.id}>\n        <label>\n          <input\n            type=\"checkbox\"\n            name=\"check\"\n            id=\"check\"\n            defaultChecked={todo.completed}\n            onChange={() => handleChecked(index, todo)}\n          />\n          {todo.task}\n        </label>\n      </li>\n    );\n  });\n\n  return <ul>{renderedList}</ul>;\n}\n\nexport default List;\n","import React from \"react\";\n\nfunction TodoForm({ handleSubmit, handleChange, ...state }) {\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={state.todo}\n        onChange={handleChange}\n        placeholder=\"Write activity here...\"\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React, { useReducer } from \"react\";\n\nimport { initialState, reducer } from \"./reducers\";\nimport \"./App.scss\";\nimport Tabs from \"./components/Tabs\";\nimport List from \"./components/List\";\nimport TodoForm from \"./components/TodoForm\";\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const handleChange = e => {\n    dispatch({ type: \"INPUT\", value: e.target.value });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    dispatch({\n      type: \"SUBMIT\",\n      payload: {\n        task: state.todo,\n        id: new Date(),\n        completed: false\n      }\n    });\n  };\n\n  const handleChecked = (index, todo) => {\n    dispatch({\n      type: \"COMPLETED\",\n      index,\n      payload: [\n        {\n          task: todo.task,\n          id: todo.id,\n          completed: !todo.completed\n        }\n      ]\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>React ToDo List w/ useReducer</h1>\n      <TodoForm\n        {...state}\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n      />\n      <Tabs {...state} dispatch={dispatch} />\n      <List {...state} handleChecked={handleChecked} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}